name: 'Terraform-Dataabricks'

on:
  workflow_dispatch:
      
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@main

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init #-backend-config="storage_account_name=${{secrets.storageaccountname}}" -backend-config="container_name=${{secrets.containername}}" -backend-config="access_key=${{secrets.access_key}}" -backend-config="key=${{secrets.statetf_file}}"
      working-directory: "."
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET}}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan  -var-file=./vars/prod.tfvars 
      working-directory: "."
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET}}
    
    - name: Terraform Apply
      id: apply
      run:
        terraform apply -var-file=./vars/prod.tfvars   -auto-approve -lock=false
      working-directory: "."
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET}}
        
    - name: update file and push to remote
      run: |
         echo "Test push commit to the remote in the workflow" >> test.txt
         git config --global user.name "github-actions[bot]"
         git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
         git add -A "*.tfstate"
         git commit -m "Update test.txt"
         git push

