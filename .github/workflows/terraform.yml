name: 'Terraform-Dataabricks'

on:
  push:
    branches:
    - "main"
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@main

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: "."
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET}}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out terraform.plan -var-file=prod.tfvars -lock=false
      working-directory: "."
      env:
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID}}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID}}
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET}}
